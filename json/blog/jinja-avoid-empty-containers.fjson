{"parents": [], "prev": null, "next": null, "title": "2.1.1. Small Wins: Avoid empty containers in Jinja", "meta": {}, "body": "<div class=\"section\" id=\"small-wins-avoid-empty-containers-in-jinja\">\n<h1>2.1.1. Small Wins: Avoid empty containers in Jinja<a class=\"headerlink\" href=\"#small-wins-avoid-empty-containers-in-jinja\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>At ZEIT ONLINE, our teasers and articles are composed of many parts like subtemplates and macros. Each component might be hidden under certain conditions. If all content of a wrapper element is hidden, we want to avoid rendering empty containers. A lesser-known Jinja feature helps us with that.</p>\n<div class=\"section\" id=\"the-problem-empty-containers\">\n<h2>2.1.1.1. The problem: empty containers<a class=\"headerlink\" href=\"#the-problem-empty-containers\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"highlight-jinja notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"x\">&lt;div class=&quot;metadata&quot;&gt;</span>\n<span class=\"x\">  </span><span class=\"cp\">{%</span> <span class=\"k\">include</span> <span class=\"s1\">&#39;byline.html&#39;</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">  </span><span class=\"cp\">{{</span> <span class=\"nv\">macro.include_datetime</span><span class=\"o\">(</span><span class=\"nv\">teaser</span><span class=\"o\">)</span> <span class=\"cp\">}}</span><span class=\"x\"></span>\n<span class=\"x\">  </span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">comments</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">    &lt;a href=&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">teaser</span> <span class=\"o\">|</span> <span class=\"nf\">create_url</span> <span class=\"cp\">}}</span><span class=\"x\">#comments&quot;&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">comments</span> <span class=\"cp\">}}</span><span class=\"x\"> Comments&lt;/a&gt;</span>\n<span class=\"x\">  </span><span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">&lt;/div&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"the-bad-solution-too-many-conditions\">\n<h2>2.1.1.2. The bad solution: too many conditions<a class=\"headerlink\" href=\"#the-bad-solution-too-many-conditions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>We could define variables which check the individual parts for their content, and respond to that.</p>\n<div class=\"highlight-jinja notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">set</span> <span class=\"nv\">teaser_has_author</span> <span class=\"o\">=</span> <span class=\"nv\">teaser</span> <span class=\"o\">|</span> <span class=\"nf\">get_authors</span> <span class=\"o\">|</span> <span class=\"nf\">length</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"cp\">{%</span> <span class=\"k\">set</span> <span class=\"nv\">teaser_has_special_format</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nv\">teaser.format</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;essay&#39;</span> <span class=\"k\">or</span> <span class=\"nv\">teaser.format</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;interview&#39;</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"cp\">{%</span> <span class=\"k\">set</span> <span class=\"nv\">byline_has_content</span> <span class=\"o\">=</span> <span class=\"nv\">teaser_has_author</span> <span class=\"k\">and</span> <span class=\"nv\">teaser_has_special_format</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">set</span> <span class=\"nv\">macro_has_content</span> <span class=\"o\">=</span> <span class=\"nv\">macro.include_datetime</span><span class=\"o\">(</span><span class=\"nv\">teaser</span><span class=\"o\">)</span> <span class=\"o\">|</span> <span class=\"nf\">length</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">byline_has_content</span> <span class=\"k\">and</span> <span class=\"nv\">macro_has_content</span> <span class=\"k\">and</span> <span class=\"nv\">comments</span> -<span class=\"cp\">%}</span><span class=\"x\"></span>\n\n<span class=\"x\">  &lt;div class=&quot;metadata&quot;&gt;</span>\n<span class=\"x\">    </span><span class=\"cp\">{%</span> <span class=\"k\">include</span> <span class=\"s1\">&#39;byline.html&#39;</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">    </span><span class=\"cp\">{{</span> <span class=\"nv\">macro.include_datetime</span><span class=\"o\">(</span><span class=\"nv\">teaser</span><span class=\"o\">)</span> <span class=\"cp\">}}</span><span class=\"x\"></span>\n<span class=\"x\">    </span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">comments</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">      &lt;a href=&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">teaser</span> <span class=\"o\">|</span> <span class=\"nf\">create_url</span> <span class=\"cp\">}}</span><span class=\"x\">#comments&quot;&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">comments</span> <span class=\"cp\">}}</span><span class=\"x\"> Comments&lt;/a&gt;</span>\n<span class=\"x\">    </span><span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">  &lt;/div&gt;</span>\n\n<span class=\"cp\">{%</span>- <span class=\"k\">endif</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n</pre></div>\n</div>\n<p>But this is not elegant, and sometimes even tricky because the outer template does not (and should not) know the inner workings of included subtemplates. Especially if many outer templates include the same part.</p>\n<p>We can do better:</p>\n</div>\n<div class=\"section\" id=\"the-good-solution-set-blocks\">\n<h2>2.1.1.3. The good solution: set blocks<a class=\"headerlink\" href=\"#the-good-solution-set-blocks\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Jinja2 introduced a new feature in version 2.8: set blocks. We know the old traditional way of defining a variable via set <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">set</span> <span class=\"pre\">foo</span> <span class=\"pre\">=</span> <span class=\"pre\">'bar'</span> <span class=\"pre\">%}</span></code> and of defining a block this way: <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">block</span> <span class=\"pre\">foo</span> <span class=\"pre\">%}bar{%</span> <span class=\"pre\">block</span> <span class=\"pre\">%}</span></code>. Even though version 2.8 was released in 2016, I have not been aware of the possibility to define (set) variables in the block style.</p>\n<div class=\"highlight-jinja notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span>- <span class=\"k\">set</span> <span class=\"nv\">teaser_metadata</span> <span class=\"o\">|</span> <span class=\"nf\">trim</span> -<span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">  </span><span class=\"cp\">{%</span> <span class=\"k\">include</span> <span class=\"s1\">&#39;byline.html&#39;</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">  </span><span class=\"cp\">{{</span> <span class=\"nv\">macro.include_datetime</span><span class=\"o\">(</span><span class=\"nv\">teaser</span><span class=\"o\">)</span> <span class=\"cp\">}}</span><span class=\"x\"></span>\n<span class=\"x\">  </span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">comments</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">    &lt;a href=&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">teaser</span> <span class=\"o\">|</span> <span class=\"nf\">create_url</span> <span class=\"cp\">}}</span><span class=\"x\">#comments&quot;&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">comments</span> <span class=\"cp\">}}</span><span class=\"x\"> Comments&lt;/a&gt;</span>\n<span class=\"x\">  </span><span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"cp\">{%</span>- <span class=\"k\">endset</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">teaser_metadata</span> <span class=\"o\">|</span>\u00a0<span class=\"nf\">length</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">  &lt;div class=&quot;metadata&quot;&gt;</span>\n<span class=\"x\">    </span><span class=\"cp\">{{</span> <span class=\"nv\">teaser_metadata</span> <span class=\"cp\">}}</span><span class=\"x\"></span>\n<span class=\"x\">  &lt;/div&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n</pre></div>\n</div>\n<p>This way, the wrapper div only gets printed if it actually has content. Each part of this content is responsible for their own output. Included subtemplates (<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">include</span> <span class=\"pre\">'byline.html'</span> <span class=\"pre\">%}</span></code>) and macros (<code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">macro.include_datetime(teaser)</span> <span class=\"pre\">}}</span></code>) do also avoid rendering empty blocks \u2013 and might use Jinjas <code class=\"docutils literal notranslate\"><span class=\"pre\">set</span> <span class=\"pre\">block</span></code> method for that.</p>\n<p>You can do the same check for blocks as well, but I prefer the cleaner way of having variables.</p>\n<div class=\"highlight-jinja notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">teaser_metadata</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">...</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">self.teaser_metadata</span><span class=\"o\">()</span> <span class=\"o\">|</span> <span class=\"nf\">trim</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n<span class=\"x\">  &lt;div class=&quot;metadata&quot;&gt;</span>\n<span class=\"x\">    </span><span class=\"cp\">{{</span> <span class=\"nv\">self.teaser_metadata</span><span class=\"o\">()</span> <span class=\"cp\">}}</span><span class=\"x\"></span>\n<span class=\"x\">  &lt;/div&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span><span class=\"x\"></span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"resources\">\n<h2>2.1.1.4. Resources<a class=\"headerlink\" href=\"#resources\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://jinja.pocoo.org/docs/2.10/templates/#block-assignments\">Block Assignments in Jinja2</a></p></li>\n</ul>\n<hr class=\"docutils\" />\n<p><em>Written 2019-03-07 by Thomas Puppe</em></p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"]], "sourcename": "blog/jinja-avoid-empty-containers.md.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">2.1.1. Small Wins: Avoid empty containers in Jinja</a><ul>\n<li><a class=\"reference internal\" href=\"#the-problem-empty-containers\">2.1.1.1. The problem: empty containers</a></li>\n<li><a class=\"reference internal\" href=\"#the-bad-solution-too-many-conditions\">2.1.1.2. The bad solution: too many conditions</a></li>\n<li><a class=\"reference internal\" href=\"#the-good-solution-set-blocks\">2.1.1.3. The good solution: set blocks</a></li>\n<li><a class=\"reference internal\" href=\"#resources\">2.1.1.4. Resources</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".md", "current_page_name": "blog/jinja-avoid-empty-containers", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}