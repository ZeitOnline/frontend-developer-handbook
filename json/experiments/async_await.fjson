{"parents": [], "prev": null, "next": null, "title": "Async Await", "meta": {}, "body": "<div class=\"section\" id=\"async-await\">\n<h1>Async Await<a class=\"headerlink\" href=\"#async-await\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"section\" id=\"userstory\">\n<h2>Userstory<a class=\"headerlink\" href=\"#userstory\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>As a developer I\u2019d like to use asynchronous functions within my javascript modules, to prevent unnecessary chaining of promises.</p>\n</div>\n<div class=\"section\" id=\"what-is-async-await\">\n<h2>What is async/await?<a class=\"headerlink\" href=\"#what-is-async-await\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>An async function can contain an await expression, that pauses the execution of the function and waits for the passed Promise\u2019s resolution, and then resumes the async function\u2019s execution and returns the resolved value. You can think of a Promise in JavaScript as the equivalent of Java\u2019s Future or C# \u2018s Task. <a class=\"reference external\" href=\"https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5?gi=92f3b9fc7172\">Source</a></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"but-why-though\">\n<h2>But why though?<a class=\"headerlink\" href=\"#but-why-though\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<blockquote>\n<div><p>Yes, you read that right. The V8 team made improvements that make async/await functions run faster than traditional promises in the JavaScript engine. 12.05.2019. <a class=\"reference external\" href=\"https://itnext.io/javascripts-async-await-versus-promise-the-great-debate-6308cb2e10b3\">Source</a></p>\n</div></blockquote>\n</div>\n<div class=\"section\" id=\"status-quo-with-the-easyembeds-as-an-example\">\n<h2>Status Quo with the easyEmbeds as an example<a class=\"headerlink\" href=\"#status-quo-with-the-easyembeds-as-an-example\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"highlight-javascript= notranslate\"><div class=\"highlight\"><pre><span></span>posts.forEach( post =&gt; {\n    [...]\n    fetch( url )\n        .then( ( response ) =&gt; {\n            if ( !response.ok ) {\n                throw new Error( &#39;Error requesting &#39; + url );\n            }\n            return response.json();\n        })\n        .then( ( data ) =&gt; {\n            this.renderPost( data, params );\n        })\n        .catch( ( error ) =&gt; {\n            zeit.log( &#39;social embed: &#39;, error );\n        });\n});\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"code-using-async-await\">\n<h2>Code using async/await<a class=\"headerlink\" href=\"#code-using-async-await\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"highlight-javascript= notranslate\"><div class=\"highlight\"><pre><span></span>posts.forEach( async post =&gt; {\n    [...]\n    try {\n        const response = await( fetch( url ) );\n        if (!response.ok) {\n          throw new Error( `Error requesting ${url}` );\n        }\n        const json = await( response ).json();\n        this.renderPost( json, params );\n    } catch ( error ) {\n        zeit.log( &#39;social embed: &#39;, error );\n    }\n});\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"result\">\n<h2>Result<a class=\"headerlink\" href=\"#result\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li><p>Babel ensures automatically, that the code is compatible with all defined browsers.</p></li>\n<li><p>Filesize <strong>before</strong>: ~ 3KB</p></li>\n<li><p>Filesize <strong>after</strong>: ~ 10KB</p></li>\n</ul>\n</div>\n<div class=\"section\" id=\"todo\">\n<h2>Todo:<a class=\"headerlink\" href=\"#todo\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li><p>Check if there are any polyfills available</p>\n<ul>\n<li><p>Size?</p></li>\n</ul>\n</li>\n<li><p>What is babels default behaviour when async/await is used in multiple modules?</p>\n<ul>\n<li><p>Where is babels additional code inserted?</p></li>\n</ul>\n</li>\n</ul>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"]], "sourcename": "experiments/async_await.md.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Async Await</a><ul>\n<li><a class=\"reference internal\" href=\"#userstory\">Userstory</a></li>\n<li><a class=\"reference internal\" href=\"#what-is-async-await\">What is async/await?</a></li>\n<li><a class=\"reference internal\" href=\"#but-why-though\">But why though?</a></li>\n<li><a class=\"reference internal\" href=\"#status-quo-with-the-easyembeds-as-an-example\">Status Quo with the easyEmbeds as an example</a></li>\n<li><a class=\"reference internal\" href=\"#code-using-async-await\">Code using async/await</a></li>\n<li><a class=\"reference internal\" href=\"#result\">Result</a></li>\n<li><a class=\"reference internal\" href=\"#todo\">Todo:</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".md", "current_page_name": "experiments/async_await", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}